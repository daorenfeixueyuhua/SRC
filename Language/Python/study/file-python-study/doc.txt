Python 文件概念
文件：python中文件是对象
Linux文件：一切设备都是文件

Python文件打开方式
方法：open(name[,mode[buf]])
    name：文件路径
    mode：打开方式
    buf：缓冲buffering大小

Python读取方式：
    read([size]):       读取文件（读取size个字节，默认读取全部）
    readline([size]):   读取一行
    readlines([size]):  读取完文件，返回每一行所组成的列表

Python写入方式：
    write(str):                     将字符串写入文件
    writelines(sequence_of_string): 写多行到文件

Python文件打开方式
    'r'     只读方式打开      文件必须存在
    'w'     只写方式打开      文件不存在创建文件、文件存在则清空文件内容
    'a'     追加方式打开      文件不存在创建文件
    'r/w+'  读写方式打开
    'a+'    追加和读写方式打开
    'rb','wb','ab','rb+','wb+','ab+':二进制方式打开

Python读取方式
    read([size]):       读取文件（读取size个字节，默认读取全部）
    readline([size]):   读取一行
    readlines([size]):  读取完文件，返回每一行所组成的列表
    iter:               使用迭代器读取文件

Python写入方式：
    write(str):                     将字符串写入文件
    writelines(sequence_of_string): 写多行到文件，参数为可迭代的对象

Python写过程与存在的问题
    存在文件缓冲机制

Python写磁盘时机
    1.主动调用close()或者flush()方法，写缓存同步到磁盘
    2.写入数据量大于或者等于写缓存，写缓存同步到磁盘

Python文件的关闭
    1.将写缓存同步到磁盘中去
    2.Linux系统中每个进程打开的文件个数是有限的
    3.如果打开文件数到了系统限制，在打开文件就会失败

Python写入和读取位置问题
    文件读取和写入文件指针都会移动相应的字节

Python写入和读取问题
    1.写入文件后，必须打开才能读取写入内容
    2.读取文件后，无法重新再次读取过的内容

Python文件指针
    Python文件指针的操作：
        seek(offset[], whence[]):   移动文件指针
            offset: 偏移量，可以为负数
            whence: 偏移相对位置

    Python文件指针定位的方式：
        os.SEEK_SET:    相对文件起始位置
        os.SEEK_CUR:    相对文件当前位置
        os.SEEK_END:    相对文件结尾位置

Python文件属性
    file.fileno():      文件描述符
    file.mode:        文件打开权限
    file.encoding:    文件编码格式
    file.closed:      文件是否关闭

Python标准文件
    文件标准输入：sys.stdin;
    文件标准输出：sys.stdout;
    文件标准错误：sys.stderr;

python文件命令行参数
    sys模块提供sys.argv属性,通过该属性可以得到命令行参数；
    sys.argv：字符串组成的列表

Python文件编码格式：
    使用codecs模块提供方法创建制定编码格式文件
        open(fname, mode, encoding, errors, buffering)

Linux文件系统简介
    文件包括：磁盘（ext2，ext4）文件，NFS文件系统，
            各种外设（sd卡，USB设备）等；

使用os模块打开文件
    os.open(filename, flag[,mode]):打开文件
    flag：打开文件方式：
        os.O_CREAT:             创建文件
        os.O_RDONLY:            只读方式打开
        os.O_WRONLY:            只写方式打开
        os.O_RDWR:              读写方式打开

使用os模块对文件进行操作
    os.read(fd,buffersize):     读取文件
    os.write(fd,string):        写入文件
    os.lseek(fd,pos,how):       文件指针操作
    os.close(fd):               关闭文件

os模块方式简介
    access(path,mode)           判断该文件权限：F_OK存在 [权限：R_OK，W_OK,X_OK]
    listdir(path)               返回当前目录下所有文件组成的列表
    remove(path)                删除文件
    rename(old,new)             修改文件或者目录名
    mkdir(path [,mode])         创建目录
    makedirs(path [,mode])      创建多级目录
    removedirs(path)            删除多级目录
    rmdir(path)                 删除目录（目录必须空目录）
os.path模块方法介绍：
    exists(path)                当前路径是否存在
    isdir(s)                    是否是一个目录
    isfile(path)                是否是一个文件
    getsize(filename)           返回文件大小
    dirname(p)                  返回路径的目录
    basename(p)                 返回路径的文件名

Python 文件练习
    内容：
        使用Python管理ini文件：实现查询、添加、删除、保存
    目的：
        1：掌握文件基本操作
        2：认识ini文件
        3：了解CongfigParser
    ini配置文件格式
        节                       [session]
        参数(键=值)               name=value
