ATD List{
    数据对象：D={ai|ai属于ElemSet，i=1，2，3，...，n，n>=0}
    数据关系：Rl={<ai-1,ai>|ai-1,ai属于D，i=1，2，3，...，n}
    基本操作：
        initList（&L）
            操作结果：构造一个空的线性表
        DestoryList（&L）
            初始条件：线性表L已存在
            操作结果：销毁线性表L
        ClearList（&L）
            初始条件：线性表L已存在
            操作结果：将L重置为空表
        ListEmpty（L）
            初始条件：线性表L已存在
            操作结果：若L为空表，则返回TRUE，否则返回FALSE
        ListLength（L）
            初始条件：线性表L已存在
            操作结果：返回L中的元素个数
        LocateList（L，e，compare（））
            初始条件：线性表L已存在，compare（）是数据元素的判定函数
            操作结果：返回L中第一个与e满足关系compare（）的数据元素的位序。若这样的数据元素不存在，则返回0
        PriorList（L，cur_e，&pre_e）
            初始条件：线性表L已存在
            操作结果：若cur_e是L的数据元素，前不是第一个，则用pre_e返回它的前驱，否则操作失败，pre_e无定义
        NextList（L，cur_e，&next_e）
            初始条件：线性表L已存在
            操作结果：若cur_e是L的数据元素而且不是最后一个，则用next_e返回她的后继，否则操作失败，next_e无定义
        ListInsert（&L，i，e）
            初始条件：线性表L已存在，1<=i<=ListLength(L)+1
            操作结果：在L中的第i个位置之前插入新的数据元素e，L的长度+1
        ListDelete(&L, i, &e)
            初始条件：线性表L已存在，1<=i<=ListLength(L)
            操作结果：删除L中的第i个数据元素，并用e返回其值，L的长度-1
        ListTreverse(L,Visit())
            初始条件：线性表L已存在
            操作结果：依次对L的而每一个数据元素调用函数Visit()，一旦Visit()失败，则操作失败
}ATD List